{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/eduardo/Desktop/WorkSpace Ubuntu/Web/Web Developer/RocketSeat/Desafios/desafio-ignite-react-chapter3/src/pages/post/[slug].tsx\";\n\n/* eslint-disable no-return-assign */\n\n/* eslint-disable no-param-reassign */\n\n/* eslint-disable react/no-danger */\nimport { RichText } from 'prismic-dom';\nimport { format } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\nimport { FiCalendar, FiUser, FiClock } from 'react-icons/fi';\nimport Prismic from '@prismicio/client';\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport { getPrismicClient } from '../../services/prismic';\nimport commonStyles from '../../styles/common.module.scss';\nimport styles from './post.module.scss';\nimport Comments from '../../components/Comments';\nexport default function Post({\n  post,\n  preview\n}) {\n  const totalWords = post.data.content.reduce((total, contentItem) => {\n    total += contentItem.heading.split(' ').length;\n    const words = contentItem.body.map(item => item.text.split(' ').length);\n    words.map(word => total += word);\n    return total;\n  }, 0);\n  const readTime = Math.ceil(totalWords / 200);\n  const router = useRouter();\n\n  if (router.isFallback) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Carregando...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 12\n    }, this);\n  }\n\n  const formatedDate = format(new Date(post.first_publication_date), 'dd MMM yyyy', {\n    locale: ptBR\n  });\n  const isPostEdited = post.first_publication_date !== post.last_publication_date;\n  let postEdited;\n\n  if (isPostEdited) {\n    postEdited = format(new Date(post.last_publication_date), \"'* editado em' dd MMM yyyy', Ã s' H':'m\", {\n      locale: ptBR\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: `${post.data.title} | spacetraveling`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: post.data.banner.url,\n      alt: \"banner\",\n      className: styles.banner\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.content,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: commonStyles.container,\n        children: [/*#__PURE__*/_jsxDEV(\"header\", {\n          className: commonStyles.posts,\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: post.data.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: commonStyles.infos,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(FiCalendar, {\n                size: 20\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: formatedDate\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(FiUser, {\n                size: 20\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: post.data.author\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(FiClock, {\n                size: 20\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: `${readTime} min`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: styles.postEdited,\n            children: isPostEdited && postEdited\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n          className: styles.content,\n          children: post.data.content.map(content => /*#__PURE__*/_jsxDEV(\"article\", {\n            className: styles.headerContent,\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: content.heading\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              dangerouslySetInnerHTML: {\n                __html: RichText.asHtml(content.body)\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 17\n            }, this)]\n          }, content.heading, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Comments, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), preview && /*#__PURE__*/_jsxDEV(\"aside\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          href: \"/api/exit-preview\",\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            className: commonStyles.preview,\n            children: \"Sair do modo Preview\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\nexport const getStaticPaths = async () => {\n  const prismic = getPrismicClient();\n  const posts = await prismic.query([Prismic.Predicates.at('document.type', 'posts')]);\n  const paths = posts.results.map(post => {\n    return {\n      params: {\n        slug: post.uid\n      }\n    };\n  });\n  return {\n    paths,\n    fallback: true\n  };\n};\nexport const getStaticProps = async ({\n  params,\n  preview = false,\n  previewData\n}) => {\n  const prismic = getPrismicClient();\n  const {\n    slug\n  } = params;\n  const response = await prismic.getByUID('posts', String(slug), {\n    ref: (previewData === null || previewData === void 0 ? void 0 : previewData.ref) || null\n  });\n  const prevPost = await prismic.query([Prismic.Predicates.at('document.type', 'posts')], {\n    pageSize: 1,\n    after: response.id,\n    orderings: '[document.first_publication_date]'\n  });\n  const nextPost = await prismic.query([Prismic.Predicates.at('document.type', 'posts')], {\n    pageSize: 1,\n    after: response.id,\n    orderings: '[document.last_publication_date desc]'\n  });\n  const post = {\n    uid: response.uid,\n    first_publication_date: response.first_publication_date,\n    last_publication_date: response.last_publication_date,\n    data: {\n      title: response.data.title,\n      subtitle: response.data.subtitle,\n      author: response.data.author,\n      banner: {\n        url: response.data.banner.url\n      },\n      content: response.data.content.map(content => {\n        return {\n          heading: content.heading,\n          body: [...content.body]\n        };\n      })\n    }\n  };\n  return {\n    props: {\n      post,\n      preview\n    }\n  };\n};","map":{"version":3,"sources":["/home/eduardo/Desktop/WorkSpace Ubuntu/Web/Web Developer/RocketSeat/Desafios/desafio-ignite-react-chapter3/src/pages/post/[slug].tsx"],"names":["RichText","format","ptBR","FiCalendar","FiUser","FiClock","Prismic","useRouter","Head","Link","getPrismicClient","commonStyles","styles","Comments","Post","post","preview","totalWords","data","content","reduce","total","contentItem","heading","split","length","words","body","map","item","text","word","readTime","Math","ceil","router","isFallback","formatedDate","Date","first_publication_date","locale","isPostEdited","last_publication_date","postEdited","title","banner","url","container","posts","infos","author","headerContent","__html","asHtml","getStaticPaths","prismic","query","Predicates","at","paths","results","params","slug","uid","fallback","getStaticProps","previewData","response","getByUID","String","ref","prevPost","pageSize","after","id","orderings","nextPost","subtitle","props"],"mappings":"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","sourcesContent":["/* eslint-disable no-return-assign */\n/* eslint-disable no-param-reassign */\n/* eslint-disable react/no-danger */\nimport { GetStaticPaths, GetStaticProps } from 'next';\nimport { RichText } from 'prismic-dom';\nimport { format } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\n\nimport { FiCalendar, FiUser, FiClock } from 'react-icons/fi';\nimport Prismic from '@prismicio/client';\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport { getPrismicClient } from '../../services/prismic';\n\nimport commonStyles from '../../styles/common.module.scss';\nimport styles from './post.module.scss';\nimport Comments from '../../components/Comments';\n\ninterface Post {\n  first_publication_date: string | null;\n  last_publication_date: string | null;\n  data: {\n    title: string;\n    banner: {\n      url: string;\n    };\n    author: string;\n    content: {\n      heading: string;\n      body: {\n        text: string;\n      }[];\n    }[];\n  };\n}\n\ninterface PostProps {\n  post: Post;\n  preview: boolean;\n}\n\nexport default function Post({ post, preview }: PostProps): JSX.Element {\n  const totalWords = post.data.content.reduce((total, contentItem) => {\n    total += contentItem.heading.split(' ').length;\n\n    const words = contentItem.body.map(item => item.text.split(' ').length);\n    words.map(word => (total += word));\n    return total;\n  }, 0);\n  const readTime = Math.ceil(totalWords / 200);\n\n  const router = useRouter();\n\n  if (router.isFallback) {\n    return <h1>Carregando...</h1>;\n  }\n\n  const formatedDate = format(\n    new Date(post.first_publication_date),\n    'dd MMM yyyy',\n    {\n      locale: ptBR,\n    }\n  );\n\n  const isPostEdited =\n    post.first_publication_date !== post.last_publication_date;\n\n  let postEdited;\n  if (isPostEdited) {\n    postEdited = format(\n      new Date(post.last_publication_date),\n      \"'* editado em' dd MMM yyyy', Ã s' H':'m\",\n      {\n        locale: ptBR,\n      }\n    );\n  }\n\n  return (\n    <>\n      <Head>\n        <title>{`${post.data.title} | spacetraveling`}</title>\n      </Head>\n\n      <img src={post.data.banner.url} alt=\"banner\" className={styles.banner} />\n      <div className={styles.content}>\n        <div className={commonStyles.container}>\n          <header className={commonStyles.posts}>\n            <h1>{post.data.title}</h1>\n            <div className={commonStyles.infos}>\n              <div>\n                <FiCalendar size={20} />\n                <p>{formatedDate}</p>\n              </div>\n              <div>\n                <FiUser size={20} />\n                <p>{post.data.author}</p>\n              </div>\n              <div>\n                <FiClock size={20} />\n                <p>{`${readTime} min`}</p>\n              </div>\n            </div>\n            <p className={styles.postEdited}>{isPostEdited && postEdited}</p>\n          </header>\n\n          <main className={styles.content}>\n            {post.data.content.map(content => (\n              <article key={content.heading} className={styles.headerContent}>\n                <h2>{content.heading}</h2>\n                <div\n                  dangerouslySetInnerHTML={{\n                    __html: RichText.asHtml(content.body),\n                  }}\n                />\n              </article>\n            ))}\n          </main>\n        </div>\n\n        <Comments />\n\n        {preview && (\n          <aside>\n            <Link href=\"/api/exit-preview\">\n              <a className={commonStyles.preview}>Sair do modo Preview</a>\n            </Link>\n          </aside>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  const prismic = getPrismicClient();\n  const posts = await prismic.query([\n    Prismic.Predicates.at('document.type', 'posts'),\n  ]);\n\n  const paths = posts.results.map(post => {\n    return {\n      params: {\n        slug: post.uid,\n      },\n    };\n  });\n\n  return {\n    paths,\n    fallback: true,\n  };\n};\n\nexport const getStaticProps: GetStaticProps = async ({\n  params,\n  preview = false,\n  previewData,\n}) => {\n  const prismic = getPrismicClient();\n  const { slug } = params;\n  const response = await prismic.getByUID('posts', String(slug), {\n    ref: previewData?.ref || null,\n  });\n\n  const prevPost = await prismic.query(\n    [Prismic.Predicates.at('document.type', 'posts')],\n    {\n      pageSize: 1,\n      after: response.id,\n      orderings: '[document.first_publication_date]',\n    }\n  );\n\n  const nextPost = await prismic.query(\n    [Prismic.Predicates.at('document.type', 'posts')],\n    {\n      pageSize: 1,\n      after: response.id,\n      orderings: '[document.last_publication_date desc]',\n    }\n  );\n\n  const post = {\n    uid: response.uid,\n    first_publication_date: response.first_publication_date,\n    last_publication_date: response.last_publication_date,\n    data: {\n      title: response.data.title,\n      subtitle: response.data.subtitle,\n      author: response.data.author,\n      banner: {\n        url: response.data.banner.url,\n      },\n      content: response.data.content.map(content => {\n        return {\n          heading: content.heading,\n          body: [...content.body],\n        };\n      }),\n    },\n  };\n\n  return {\n    props: {\n      post,\n      preview,\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}