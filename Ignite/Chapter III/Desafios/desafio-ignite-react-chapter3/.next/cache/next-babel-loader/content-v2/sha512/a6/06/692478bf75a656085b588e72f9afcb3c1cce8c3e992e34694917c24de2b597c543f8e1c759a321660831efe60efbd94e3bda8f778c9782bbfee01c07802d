{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/eduardo/Desktop/WorkSpace Ubuntu/Web/Web Developer/RocketSeat/Desafios/desafio-ignite-react-chapter3/src/pages/index.tsx\";\nimport Prismic from '@prismicio/client';\nimport { FiCalendar, FiUser } from 'react-icons/fi';\nimport { RichText } from 'prismic-dom';\nimport { getPrismicClient } from '../services/prismic';\nimport styles from './home.module.scss';\nexport default function Home() {\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: styles.mainContent,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.posts,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Como utilizar Hooks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Pensando em sincroniza\\xE7\\xE3o em vez de ciclos de vida.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.infos,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(FiCalendar, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"15 Mar 2021\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(FiUser, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Eduardo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\nexport const getStaticProps = async () => {\n  const prismic = getPrismicClient();\n  const response = await prismic.query([Prismic.predicates.at('document.type', 'posts')], {\n    fetch: ['posts.title', 'posts.content'],\n    pageSize: 100\n  }); // console.log(JSON.stringify(response, null, 2))\n\n  const posts = response.results.map(post => {\n    var _post$data$content$fi, _post$data$content$fi2;\n\n    return {\n      slug: post.uid,\n      title: RichText.asText(post.data.title),\n      excerpt: (_post$data$content$fi = (_post$data$content$fi2 = post.data.content.find(content => content.type === 'paragraph')) === null || _post$data$content$fi2 === void 0 ? void 0 : _post$data$content$fi2.text) !== null && _post$data$content$fi !== void 0 ? _post$data$content$fi : '',\n      updatedAt: new Date(post.last_publication_date).toLocaleDateString('pt-BR', {\n        day: '2-digit',\n        month: 'long',\n        year: 'numeric'\n      })\n    };\n  });\n  return {\n    props: {\n      posts\n    }\n  };\n}; // TODO","map":{"version":3,"sources":["/home/eduardo/Desktop/WorkSpace Ubuntu/Web/Web Developer/RocketSeat/Desafios/desafio-ignite-react-chapter3/src/pages/index.tsx"],"names":["Prismic","FiCalendar","FiUser","RichText","getPrismicClient","styles","Home","mainContent","posts","infos","getStaticProps","prismic","response","query","predicates","at","fetch","pageSize","results","map","post","slug","uid","title","asText","data","excerpt","content","find","type","text","updatedAt","Date","last_publication_date","toLocaleDateString","day","month","year","props"],"mappings":";;AACA,OAAOA,OAAP,MAAoB,mBAApB;AAEA,SAASC,UAAT,EAAqBC,MAArB,QAAmC,gBAAnC;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AAGA,OAAOC,MAAP,MAAmB,oBAAnB;AAqBA,eAAe,SAASC,IAAT,GAA6B;AAC1C,sBACE;AAAM,IAAA,SAAS,EAAED,MAAM,CAACE,WAAxB;AAAA,2BACE;AAAK,MAAA,SAAS,EAAEF,MAAM,CAACG,KAAvB;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAK,QAAA,SAAS,EAAEH,MAAM,CAACI,KAAvB;AAAA,gCACE;AAAA,kCACE,QAAC,UAAD;AAAY,YAAA,IAAI,EAAE;AAAlB;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAKE;AAAA,kCACE,QAAC,MAAD;AAAQ,YAAA,IAAI,EAAE;AAAd;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;AAED,OAAO,MAAMC,cAA8B,GAAG,YAAY;AACxD,QAAMC,OAAO,GAAGP,gBAAgB,EAAhC;AAEA,QAAMQ,QAAQ,GAAG,MAAMD,OAAO,CAACE,KAAR,CACrB,CAACb,OAAO,CAACc,UAAR,CAAmBC,EAAnB,CAAsB,eAAtB,EAAuC,OAAvC,CAAD,CADqB,EAErB;AACEC,IAAAA,KAAK,EAAE,CAAC,aAAD,EAAgB,eAAhB,CADT;AAEEC,IAAAA,QAAQ,EAAE;AAFZ,GAFqB,CAAvB,CAHwD,CAWxD;;AAEA,QAAMT,KAAK,GAAGI,QAAQ,CAACM,OAAT,CAAiBC,GAAjB,CAAqBC,IAAI,IAAI;AAAA;;AACzC,WAAO;AACLC,MAAAA,IAAI,EAAED,IAAI,CAACE,GADN;AAELC,MAAAA,KAAK,EAAEpB,QAAQ,CAACqB,MAAT,CAAgBJ,IAAI,CAACK,IAAL,CAAUF,KAA1B,CAFF;AAGLG,MAAAA,OAAO,qDACLN,IAAI,CAACK,IAAL,CAAUE,OAAV,CAAkBC,IAAlB,CAAuBD,OAAO,IAAIA,OAAO,CAACE,IAAR,KAAiB,WAAnD,CADK,2DACL,uBAAiEC,IAD5D,yEAEL,EALG;AAMLC,MAAAA,SAAS,EAAE,IAAIC,IAAJ,CAASZ,IAAI,CAACa,qBAAd,EAAqCC,kBAArC,CACT,OADS,EAET;AACEC,QAAAA,GAAG,EAAE,SADP;AAEEC,QAAAA,KAAK,EAAE,MAFT;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAFS;AANN,KAAP;AAeD,GAhBa,CAAd;AAkBA,SAAO;AACLC,IAAAA,KAAK,EAAE;AACL9B,MAAAA;AADK;AADF,GAAP;AAKD,CApCM,C,CAqCP","sourcesContent":["import { GetStaticProps } from 'next';\nimport Prismic from '@prismicio/client';\n\nimport { FiCalendar, FiUser } from 'react-icons/fi';\nimport { RichText } from 'prismic-dom';\nimport { getPrismicClient } from '../services/prismic';\n\nimport commonStyles from '../styles/common.module.scss';\nimport styles from './home.module.scss';\n\ninterface Post {\n  uid?: string;\n  first_publication_date: string | null;\n  data: {\n    title: string;\n    subtitle: string;\n    author: string;\n  };\n}\n\ninterface PostPagination {\n  next_page: string;\n  results: Post[];\n}\n\ninterface HomeProps {\n  postsPagination: PostPagination;\n}\n\nexport default function Home(): JSX.Element {\n  return (\n    <main className={styles.mainContent}>\n      <div className={styles.posts}>\n        <h1>Como utilizar Hooks</h1>\n        <p>Pensando em sincronização em vez de ciclos de vida.</p>\n        <div className={styles.infos}>\n          <div>\n            <FiCalendar size={20} />\n            <p>15 Mar 2021</p>\n          </div>\n          <div>\n            <FiUser size={20} />\n            <p>Eduardo</p>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n}\n\nexport const getStaticProps: GetStaticProps = async () => {\n  const prismic = getPrismicClient();\n\n  const response = await prismic.query(\n    [Prismic.predicates.at('document.type', 'posts')],\n    {\n      fetch: ['posts.title', 'posts.content'],\n      pageSize: 100,\n    }\n  );\n\n  // console.log(JSON.stringify(response, null, 2))\n\n  const posts = response.results.map(post => {\n    return {\n      slug: post.uid,\n      title: RichText.asText(post.data.title),\n      excerpt:\n        post.data.content.find(content => content.type === 'paragraph')?.text ??\n        '',\n      updatedAt: new Date(post.last_publication_date).toLocaleDateString(\n        'pt-BR',\n        {\n          day: '2-digit',\n          month: 'long',\n          year: 'numeric',\n        }\n      ),\n    };\n  });\n\n  return {\n    props: {\n      posts,\n    },\n  };\n};\n// TODO\n"]},"metadata":{},"sourceType":"module"}