{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable consistent-return */\n\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\n/* eslint-disable no-use-before-define */\n\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\nimport Prismic from '@prismicio/client';\nconst apiEndpoint = process.env.PRISMIC_API_ENDPOINT;\nconst accessToken = process.env.PRISMIC_ACCESS_TOKEN;\n\nfunction linkResolver(doc) {\n  if (doc.type === 'posts') {\n    return `/post/${doc.uid}`;\n  }\n\n  return '/';\n} // Client method to query from the Prismic repo\n\n\nconst Client = (req = null) => Prismic.client(apiEndpoint, createClientOptions(req, accessToken));\n\nconst createClientOptions = (req = null, prismicAccessToken = null) => {\n  const reqOption = req ? {\n    req\n  } : {};\n  const accessTokenOption = prismicAccessToken ? {\n    accessToken: prismicAccessToken\n  } : {};\n  return _objectSpread(_objectSpread({}, reqOption), accessTokenOption);\n};\n\nconst Preview = async (req, res) => {\n  const {\n    token: ref,\n    documentId\n  } = req.query;\n  const redirectUrl = await Client(req).getPreviewResolver(ref, documentId).resolve(linkResolver, '/');\n\n  if (!redirectUrl) {\n    return res.status(401).json({\n      message: 'Invalid token'\n    });\n  }\n\n  res.setPreviewData({\n    ref\n  });\n  res.writeHead(302, {\n    Location: `${redirectUrl}`\n  });\n  res.end();\n};\n\nexport default Preview;","map":{"version":3,"sources":["/home/eduardo/Desktop/WorkSpace Ubuntu/Web/Web Developer/RocketSeat/Desafios/desafio-ignite-react-chapter3/src/pages/api/preview.ts"],"names":["Prismic","apiEndpoint","process","env","PRISMIC_API_ENDPOINT","accessToken","PRISMIC_ACCESS_TOKEN","linkResolver","doc","type","uid","Client","req","client","createClientOptions","prismicAccessToken","reqOption","accessTokenOption","Preview","res","token","ref","documentId","query","redirectUrl","getPreviewResolver","resolve","status","json","message","setPreviewData","writeHead","Location","end"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AACA;AACA,OAAOA,OAAP,MAAoB,mBAApB;AAIA,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYC,oBAAhC;AACA,MAAMC,WAAW,GAAGH,OAAO,CAACC,GAAR,CAAYG,oBAAhC;;AAEA,SAASC,YAAT,CAAsBC,GAAtB,EAA6C;AAC3C,MAAIA,GAAG,CAACC,IAAJ,KAAa,OAAjB,EAA0B;AACxB,WAAQ,SAAQD,GAAG,CAACE,GAAI,EAAxB;AACD;;AACD,SAAO,GAAP;AACD,C,CAED;;;AACA,MAAMC,MAAM,GAAG,CAACC,GAAG,GAAG,IAAP,KACbZ,OAAO,CAACa,MAAR,CAAeZ,WAAf,EAA4Ba,mBAAmB,CAACF,GAAD,EAAMP,WAAN,CAA/C,CADF;;AAGA,MAAMS,mBAAmB,GAAG,CAACF,GAAG,GAAG,IAAP,EAAaG,kBAAkB,GAAG,IAAlC,KAA2C;AACrE,QAAMC,SAAS,GAAGJ,GAAG,GAAG;AAAEA,IAAAA;AAAF,GAAH,GAAa,EAAlC;AACA,QAAMK,iBAAiB,GAAGF,kBAAkB,GACxC;AAAEV,IAAAA,WAAW,EAAEU;AAAf,GADwC,GAExC,EAFJ;AAGA,yCACKC,SADL,GAEKC,iBAFL;AAID,CATD;;AAWA,MAAMC,OAAO,GAAG,OAAON,GAAP,EAAYO,GAAZ,KAAoB;AAClC,QAAM;AAAEC,IAAAA,KAAK,EAAEC,GAAT;AAAcC,IAAAA;AAAd,MAA6BV,GAAG,CAACW,KAAvC;AACA,QAAMC,WAAW,GAAG,MAAMb,MAAM,CAACC,GAAD,CAAN,CACvBa,kBADuB,CACJJ,GADI,EACCC,UADD,EAEvBI,OAFuB,CAEfnB,YAFe,EAED,GAFC,CAA1B;;AAIA,MAAI,CAACiB,WAAL,EAAkB;AAChB,WAAOL,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB,CAAP;AACD;;AAEDV,EAAAA,GAAG,CAACW,cAAJ,CAAmB;AAAET,IAAAA;AAAF,GAAnB;AACAF,EAAAA,GAAG,CAACY,SAAJ,CAAc,GAAd,EAAmB;AAAEC,IAAAA,QAAQ,EAAG,GAAER,WAAY;AAA3B,GAAnB;AACAL,EAAAA,GAAG,CAACc,GAAJ;AACD,CAbD;;AAeA,eAAef,OAAf","sourcesContent":["/* eslint-disable consistent-return */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable no-use-before-define */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\nimport Prismic from '@prismicio/client';\n\nimport { Document } from '@prismicio/client/types/documents';\n\nconst apiEndpoint = process.env.PRISMIC_API_ENDPOINT;\nconst accessToken = process.env.PRISMIC_ACCESS_TOKEN;\n\nfunction linkResolver(doc: Document): string {\n  if (doc.type === 'posts') {\n    return `/post/${doc.uid}`;\n  }\n  return '/';\n}\n\n// Client method to query from the Prismic repo\nconst Client = (req = null) =>\n  Prismic.client(apiEndpoint, createClientOptions(req, accessToken));\n\nconst createClientOptions = (req = null, prismicAccessToken = null) => {\n  const reqOption = req ? { req } : {};\n  const accessTokenOption = prismicAccessToken\n    ? { accessToken: prismicAccessToken }\n    : {};\n  return {\n    ...reqOption,\n    ...accessTokenOption,\n  };\n};\n\nconst Preview = async (req, res) => {\n  const { token: ref, documentId } = req.query;\n  const redirectUrl = await Client(req)\n    .getPreviewResolver(ref, documentId)\n    .resolve(linkResolver, '/');\n\n  if (!redirectUrl) {\n    return res.status(401).json({ message: 'Invalid token' });\n  }\n\n  res.setPreviewData({ ref });\n  res.writeHead(302, { Location: `${redirectUrl}` });\n  res.end();\n};\n\nexport default Preview;\n"]},"metadata":{},"sourceType":"module"}