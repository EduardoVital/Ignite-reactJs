{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/eduardo/Desktop/WorkSpace Ubuntu/Web/Web Developer/RocketSeat/Desafios/desafio-ignite-react-chapter3/src/pages/index.tsx\";\nimport Prismic from '@prismicio/client';\nimport { FiCalendar, FiUser } from 'react-icons/fi';\nimport Link from 'next/link';\nimport { getPrismicClient } from '../services/prismic';\nimport styles from './home.module.scss';\nimport commonStyles from '../styles/common.module.scss';\nexport default function Home({\n  results,\n  next_page\n}) {\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: commonStyles.container,\n    children: results.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.posts,\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        href: `/post/${post.uid}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: post.data.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.data.subtitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.infos,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(FiCalendar, {\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: post.first_publication_date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(FiUser, {\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: post.data.author\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)\n    }, post.uid, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\nexport const getStaticProps = async () => {\n  const prismic = getPrismicClient();\n  const response = await prismic.query([Prismic.Predicates.at('document.type', 'posts')], {\n    fetch: ['posts.title', 'posts.subtitle', 'posts.author'],\n    pageSize: 5\n  });\n  const results = response.results.map(post => {\n    return {\n      uid: post.uid,\n      first_publication_date: new Date(post.first_publication_date).toLocaleDateString('pt-BR', {\n        day: '2-digit',\n        month: 'long',\n        year: 'numeric'\n      }),\n      data: {\n        title: post.data.title,\n        subtitle: post.data.subtitle,\n        author: post.data.author\n      }\n    };\n  });\n  return {\n    props: {\n      results\n    }\n  };\n};","map":{"version":3,"sources":["/home/eduardo/Desktop/WorkSpace Ubuntu/Web/Web Developer/RocketSeat/Desafios/desafio-ignite-react-chapter3/src/pages/index.tsx"],"names":["Prismic","FiCalendar","FiUser","Link","getPrismicClient","styles","commonStyles","Home","results","next_page","container","map","post","posts","uid","data","title","subtitle","infos","first_publication_date","author","getStaticProps","prismic","response","query","Predicates","at","fetch","pageSize","Date","toLocaleDateString","day","month","year","props"],"mappings":"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","sourcesContent":["import { GetStaticProps } from 'next';\nimport Prismic from '@prismicio/client';\n\nimport { FiCalendar, FiUser } from 'react-icons/fi';\nimport Link from 'next/link';\nimport { getPrismicClient } from '../services/prismic';\n\nimport styles from './home.module.scss';\nimport commonStyles from '../styles/common.module.scss';\n\ninterface Post {\n  uid?: string;\n  first_publication_date: string | null;\n  data: {\n    title: string;\n    subtitle: string;\n    author: string;\n  };\n}\n\ninterface PostPagination {\n  next_page: string;\n  results: Post[];\n}\n\ninterface HomeProps {\n  postsPagination: PostPagination;\n}\n\nexport default function Home({\n  results,\n  next_page,\n}: PostPagination): JSX.Element {\n  return (\n    <main className={commonStyles.container}>\n      {results.map(post => (\n        <div key={post.uid} className={styles.posts}>\n          <Link href={`/post/${post.uid}`}>\n            <h1>{post.data.title}</h1>\n            <p>{post.data.subtitle}</p>\n            <div className={styles.infos}>\n              <div>\n                <FiCalendar size={20} />\n                <p>{post.first_publication_date}</p>\n              </div>\n              <div>\n                <FiUser size={20} />\n                <p>{post.data.author}</p>\n              </div>\n            </div>\n          </Link>\n        </div>\n      ))}\n    </main>\n  );\n}\n\nexport const getStaticProps: GetStaticProps = async () => {\n  const prismic = getPrismicClient();\n  const response = await prismic.query(\n    [Prismic.Predicates.at('document.type', 'posts')],\n    {\n      fetch: ['posts.title', 'posts.subtitle', 'posts.author'],\n      pageSize: 5,\n    }\n  );\n\n  const results = response.results.map(post => {\n    return {\n      uid: post.uid,\n      first_publication_date: new Date(\n        post.first_publication_date\n      ).toLocaleDateString('pt-BR', {\n        day: '2-digit',\n        month: 'long',\n        year: 'numeric',\n      }),\n      data: {\n        title: post.data.title,\n        subtitle: post.data.subtitle,\n        author: post.data.author,\n      },\n    };\n  });\n\n  return {\n    props: {\n      results,\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}